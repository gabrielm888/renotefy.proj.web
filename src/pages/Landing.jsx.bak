import { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import { motion, useScroll, useTransform, useInView } from 'framer-motion';

// Interactive note card with typing effect
const NoteCard = ({ delay }) => {
  const [text, setText] = useState('');
  const fullText = 'The gentle rustle of leaves in the breeze created a soothing melody as sunlight filtered through the canopy above. In that moment, time seemed to stand still.';
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  
  useEffect(() => {
    if (isInView) {
      const timeout = setTimeout(() => {
        if (text.length < fullText.length) {
          setText(fullText.substring(0, text.length + 1));
        }
      }, 70);
      return () => clearTimeout(timeout);
    }
  }, [text, isInView]);

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 transform -rotate-3 z-10 w-full max-w-md"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
      whileHover={{ y: -5 }}
    >
      <div className="flex items-center mb-3">
        <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
        <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
        <div className="w-3 h-3 rounded-full bg-green-400"></div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm ml-3">Literature Notes</h3>
      </div>
      <div className="prose prose-sm dark:prose-invert mt-2">
        <p>{text}<span className="animate-pulse">|</span></p>
      </div>
    </motion.div>
  );
};

// Note preview card
const NotesListCard = ({ delay }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  
  const notesData = [
    { 
      id: 1, 
      title: 'Airport Arrival', 
      icon: '‚úàÔ∏è', 
      date: 'Jun 15', 
      color: 'bg-blue-100 dark:bg-blue-900',
      excerpt: 'Flight AA307 arrives at Terminal 3. Remember to check baggage claim area B.',
      tags: ['Travel', 'Important']
    },
    { 
      id: 2, 
      title: 'Scheduled Meeting', 
      icon: 'üóìÔ∏è', 
      date: 'Jun 17', 
      color: 'bg-green-100 dark:bg-green-900',
      excerpt: 'Marketing team presentation at 2:30 PM. Prepare slides for Q2 performance review.',
      tags: ['Work', 'Meeting']
    },
    { 
      id: 3, 
      title: 'Biology Class', 
      icon: 'üß¨', 
      date: 'Jun 18', 
      color: 'bg-yellow-100 dark:bg-yellow-900',
      excerpt: 'Chapter 7: Cell structure and function. Remember to review mitochondria functions.',
      tags: ['Study', 'Science']
    },
  ];

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 z-20 w-full max-w-lg"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
      whileHover={{ y: -5 }}
    >
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-green-400"></div>
        </div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm font-medium">My Notes</h3>
        <div className="flex items-center space-x-2">
          <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-xs">+</div>
          <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </div>
        </div>
      </div>
      
      <div className="space-y-3 mt-4">
        {notesData.map((note) => (
          <motion.div 
            key={note.id}
            className={`p-4 rounded-lg ${note.color} overflow-hidden`}
            whileHover={{ scale: 1.02, x: 3 }}
            transition={{ type: "spring", stiffness: 300, damping: 10 }}
          >
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <span className="text-xl mr-3">{note.icon}</span>
                <span className="font-medium text-gray-800 dark:text-gray-100">{note.title}</span>
              </div>
              <span className="text-xs text-gray-500 dark:text-gray-400">{note.date}</span>
            </div>
            
            <p className="text-sm text-gray-700 dark:text-gray-300 mt-1 line-clamp-2">{note.excerpt}</p>
            
            <div className="flex mt-2 space-x-2">
              {note.tags.map((tag, idx) => (
                <span key={idx} className="text-xs px-2 py-1 bg-white/50 dark:bg-gray-700/50 rounded-full text-gray-600 dark:text-gray-300">
                  {tag}
                </span>
              ))}
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

// Quiz Card Component
const QuizCard = ({ delay }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showFeedback, setShowFeedback] = useState(false);

  const quizData = {
    question: 'What part of the cell is responsible for energy production?',
    answers: [
      { id: 1, text: 'Nucleus', isCorrect: false },
      { id: 2, text: 'Mitochondria', isCorrect: true },
      { id: 3, text: 'Endoplasmic Reticulum', isCorrect: false },
      { id: 4, text: 'Golgi Apparatus', isCorrect: false },
    ]
  };

  const handleSelectAnswer = (id) => {
    setSelectedAnswer(id);
    setShowFeedback(true);
  };

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 transform rotate-2 z-10 w-full max-w-md"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
      whileHover={{ y: -5 }}
    >
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-green-400"></div>
        </div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm font-medium">Study Quiz</h3>
      </div>
      
      <div className="mt-3">
        <h4 className="text-lg font-medium text-gray-800 dark:text-gray-100 mb-4">{quizData.question}</h4>
        
        <div className="space-y-3">
          {quizData.answers.map((answer) => (
            <motion.div
              key={answer.id}
              className={`p-3 rounded-lg border ${selectedAnswer === answer.id 
                ? (answer.isCorrect ? 'bg-green-100 border-green-300 dark:bg-green-900/50 dark:border-green-700' : 'bg-red-100 border-red-300 dark:bg-red-900/50 dark:border-red-700') 
                : 'bg-gray-50 border-gray-200 dark:bg-gray-700/50 dark:border-gray-600'}`}
              whileHover={{ scale: selectedAnswer ? 1.0 : 1.02, x: 5 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => !selectedAnswer && handleSelectAnswer(answer.id)}
              animate={answer.id === 2 && showFeedback ? { y: [0, -10, 0] } : {}}
              transition={{
                type: "spring",
                stiffness: 500,
                damping: 10,
                y: { duration: 0.5, repeat: 0 }
              }}
            >
              <div className="flex items-center">
                <div className={`w-5 h-5 rounded-full flex items-center justify-center mr-3 ${selectedAnswer === answer.id 
                  ? (answer.isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white') 
                  : 'bg-gray-200 dark:bg-gray-600'}`}>
                  {selectedAnswer === answer.id && answer.isCorrect && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                  )}
                  {selectedAnswer === answer.id && !answer.isCorrect && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                  )}
                </div>
                <span className="text-sm font-medium text-gray-800 dark:text-gray-100">{answer.text}</span>
              </div>
            </motion.div>
          ))}
        </div>
        
        {showFeedback && (
          <motion.div 
            className="mt-4 text-sm text-gray-600 dark:text-gray-300 bg-blue-50 dark:bg-blue-900/30 p-3 rounded-lg"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            transition={{ duration: 0.3 }}
          >
            <p className="font-medium">Did you know?</p>
            <p className="mt-1">Mitochondria are often referred to as the "powerhouse of the cell" because they generate most of the cell's supply of ATP, used as a source of chemical energy.</p>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};

// App Preview Cards Component
const AppPreviewCards = ({ isVisible }) => {
  const { scrollYProgress } = useScroll();
  const cardsContainerRef = useRef(null);
  const containerInView = useInView(cardsContainerRef, { once: false, margin: "-10% 0px" });
  
  // Create different transform values for each card to create a parallax effect
  const y1 = useTransform(scrollYProgress, [0, 0.5], [0, -70]); // Quiz Card
  const y2 = useTransform(scrollYProgress, [0, 0.5], [0, -40]); // Notes List Card
  const y3 = useTransform(scrollYProgress, [0, 0.5], [0, -60]); // Note Card
  
  return (
    <div className="max-w-6xl mx-auto relative px-4 py-12" ref={cardsContainerRef}>
      <motion.div 
        className="absolute inset-0 bg-gradient-to-r from-blue-400/40 to-pink-400/40 rounded-3xl blur-3xl"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ 
          opacity: containerInView ? 0.5 : 0,
          scale: containerInView ? 1.1 : 0.95
        }}
        transition={{ duration: 0.8 }}
      ></motion.div>
      
      <div className="grid grid-cols-1 md:grid-cols-12 gap-6 relative">
        <motion.div 
          className="md:col-span-4 flex items-center justify-center order-2 md:order-1"
          style={{ y: y1 }}
        >
          <QuizCard delay={0.1} />
        </motion.div>
        <motion.div 
          className="md:col-span-5 flex items-center justify-center order-1 md:order-2"
          style={{ y: y2 }}
        >
          <NotesListCard delay={0.2} />
        </motion.div>
        <motion.div 
          className="md:col-span-3 flex items-center justify-center md:mt-12 order-3"
          style={{ y: y3 }}
        >
          <NoteCard delay={0.3} />
        </motion.div>
      </div>
    </div>
  );
};

// Interactive note card with typing effect
const NoteCard = ({ delay }) => {
  const [text, setText] = useState('');
  const fullText = 'The gentle rustle of leaves in the breeze created a soothing melody as sunlight filtered through the canopy above. In that moment, time seemed to stand still.';
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  
  useEffect(() => {
    if (isInView) {
      const timeout = setTimeout(() => {
        if (text.length < fullText.length) {
          setText(fullText.substring(0, text.length + 1));
        }
      }, 70);
      return () => clearTimeout(timeout);
    }
  }, [text, isInView]);

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 transform -rotate-3 z-10"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
    >
      <div className="flex items-center mb-3">
        <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
        <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
        <div className="w-3 h-3 rounded-full bg-green-400"></div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm ml-3">Literature Notes</h3>
      </div>
      <div className="prose prose-sm dark:prose-invert mt-2">
        <p>{text}<span className="animate-pulse">|</span></p>
      </div>
    </motion.div>
  );
};

// Note preview card
const NotesListCard = ({ delay }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  
  const notesData = [
    { 
      id: 1, 
      title: 'Airport Arrival', 
      icon: '‚úàÔ∏è', 
      date: 'Jun 15', 
      color: 'bg-blue-100 dark:bg-blue-900',
      excerpt: 'Flight AA307 arrives at Terminal 3. Remember to check baggage claim area B.',
      tags: ['Travel', 'Important']
    },
    { 
      id: 2, 
      title: 'Scheduled Meeting', 
      icon: 'üóìÔ∏è', 
      date: 'Jun 17', 
      color: 'bg-green-100 dark:bg-green-900',
      excerpt: 'Marketing team presentation at 2:30 PM. Prepare slides for Q2 performance review.',
      tags: ['Work', 'Meeting']
    },
    { 
      id: 3, 
      title: 'Biology Class', 
      icon: 'üß¨', 
      date: 'Jun 18', 
      color: 'bg-yellow-100 dark:bg-yellow-900',
      excerpt: 'Chapter 7: Cell structure and function. Remember to review mitochondria functions.',
      tags: ['Study', 'Science']
    },
  ];

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 z-20 w-full max-w-lg"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
      whileHover={{ y: -5 }}
    >
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-green-400"></div>
        </div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm font-medium">My Notes</h3>
        <div className="flex items-center space-x-2">
          <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center text-xs">+</div>
          <div className="w-6 h-6 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <line x1="3" y1="12" x2="21" y2="12"></line>
              <line x1="3" y1="6" x2="21" y2="6"></line>
              <line x1="3" y1="18" x2="21" y2="18"></line>
            </svg>
          </div>
        </div>
      </div>
      
      <div className="space-y-3 mt-4">
        {notesData.map((note) => (
          <motion.div 
            key={note.id}
            className={`p-4 rounded-lg ${note.color} overflow-hidden`}
            whileHover={{ scale: 1.02, x: 3 }}
            transition={{ type: "spring", stiffness: 300, damping: 10 }}
          >
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center">
                <span className="text-xl mr-3">{note.icon}</span>
                <span className="font-medium text-gray-800 dark:text-gray-100">{note.title}</span>
              </div>
              <span className="text-xs text-gray-500 dark:text-gray-400">{note.date}</span>
            </div>
            
            <p className="text-sm text-gray-700 dark:text-gray-300 mt-1 line-clamp-2">{note.excerpt}</p>
            
            <div className="flex mt-2 space-x-2">
              {note.tags.map((tag, idx) => (
                <span key={idx} className="text-xs px-2 py-1 bg-white/50 dark:bg-gray-700/50 rounded-full text-gray-600 dark:text-gray-300">
                  {tag}
                </span>
              ))}
            </div>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};

// Quiz Card Component
const QuizCard = ({ delay }) => {
  const ref = useRef(null);
  const isInView = useInView(ref, { once: false, margin: "-100px 0px" });
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [showFeedback, setShowFeedback] = useState(false);

  const quizData = {
    question: 'What part of the cell is responsible for energy production?',
    answers: [
      { id: 1, text: 'Nucleus', isCorrect: false },
      { id: 2, text: 'Mitochondria', isCorrect: true },
      { id: 3, text: 'Endoplasmic Reticulum', isCorrect: false },
      { id: 4, text: 'Golgi Apparatus', isCorrect: false },
    ]
  };

  const handleSelectAnswer = (id) => {
    setSelectedAnswer(id);
    setShowFeedback(true);
  };

  return (
    <motion.div
      ref={ref}
      className="bg-white dark:bg-gray-800 rounded-xl shadow-apple p-5 transform rotate-2 z-10 w-full max-w-md"
      initial={{ opacity: 0, y: 100 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
      transition={{ duration: 0.6, delay: delay, type: "spring", stiffness: 100 }}
      whileHover={{ y: -5 }}
    >
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center">
          <div className="w-3 h-3 rounded-full bg-red-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-yellow-400 mr-2"></div>
          <div className="w-3 h-3 rounded-full bg-green-400"></div>
        </div>
        <h3 className="text-gray-500 dark:text-gray-400 text-sm font-medium">Study Quiz</h3>
      </div>
      
      <div className="mt-3">
        <h4 className="text-lg font-medium text-gray-800 dark:text-gray-100 mb-4">{quizData.question}</h4>
        
        <div className="space-y-3">
          {quizData.answers.map((answer) => (
            <motion.div
              key={answer.id}
              className={`p-3 rounded-lg border ${selectedAnswer === answer.id 
                ? (answer.isCorrect ? 'bg-green-100 border-green-300 dark:bg-green-900/50 dark:border-green-700' : 'bg-red-100 border-red-300 dark:bg-red-900/50 dark:border-red-700') 
                : 'bg-gray-50 border-gray-200 dark:bg-gray-700/50 dark:border-gray-600'}`}
              whileHover={{ scale: selectedAnswer ? 1.0 : 1.02, x: 5 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => !selectedAnswer && handleSelectAnswer(answer.id)}
              animate={answer.id === 2 && showFeedback ? { y: [0, -10, 0] } : {}}
              transition={{
                type: "spring",
                stiffness: 500,
                damping: 10,
                y: { duration: 0.5, repeat: 0 }
              }}
            >
              <div className="flex items-center">
                <div className={`w-5 h-5 rounded-full flex items-center justify-center mr-3 ${selectedAnswer === answer.id 
                  ? (answer.isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white') 
                  : 'bg-gray-200 dark:bg-gray-600'}`}>
                  {selectedAnswer === answer.id && answer.isCorrect && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <polyline points="20 6 9 17 4 12"></polyline>
                    </svg>
                  )}
                  {selectedAnswer === answer.id && !answer.isCorrect && (
                    <svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                  )}
                </div>
                <span className="text-sm font-medium text-gray-800 dark:text-gray-100">{answer.text}</span>
              </div>
            </motion.div>
          ))}
        </div>
        
        {showFeedback && (
          <motion.div 
            className="mt-4 text-sm text-gray-600 dark:text-gray-300 bg-blue-50 dark:bg-blue-900/30 p-3 rounded-lg"
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            transition={{ duration: 0.3 }}
          >
            <p className="font-medium">Did you know?</p>
            <p className="mt-1">Mitochondria are often referred to as the "powerhouse of the cell" because they generate most of the cell's supply of ATP, used as a source of chemical energy.</p>
          </motion.div>
        )}
      </div>
// App Preview Cards Component
const AppPreviewCards = ({ isVisible }) => {
  const { scrollYProgress } = useScroll();
  const cardsContainerRef = useRef(null);
  const containerInView = useInView(cardsContainerRef, { once: false, margin: "-10% 0px" });
  
  // Create different transform values for each card to create a parallax effect
  const y1 = useTransform(scrollYProgress, [0, 0.5], [0, -70]); // Quiz Card
  const y2 = useTransform(scrollYProgress, [0, 0.5], [0, -40]); // Notes List Card
  const y3 = useTransform(scrollYProgress, [0, 0.5], [0, -60]); // Note Card
  
  return (
    <div className="max-w-6xl mx-auto relative px-4 py-12" ref={cardsContainerRef}>
      <motion.div 
        className="absolute inset-0 bg-gradient-to-r from-blue-400/40 to-pink-400/40 rounded-3xl blur-3xl"
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ 
          opacity: containerInView ? 0.5 : 0,
          scale: containerInView ? 1.1 : 0.95
        }}
        transition={{ duration: 0.8 }}
      ></motion.div>
      
      <div className="grid grid-cols-1 md:grid-cols-12 gap-6 relative">
        <motion.div 
          className="md:col-span-4 flex items-center justify-center order-2 md:order-1"
          style={{ y: y1 }}
          initial={{ opacity: 0, y: 100 }}
          animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
          <QuizCard delay={0.1} />
        </motion.div>
        <motion.div 
          className="md:col-span-5 flex items-center justify-center order-1 md:order-2"
          style={{ y: y2 }}
          initial={{ opacity: 0, y: 100 }}
          animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          <NotesListCard delay={0.2} />
        </motion.div>
        <motion.div 
          className="md:col-span-3 flex items-center justify-center md:mt-12 order-3"
          style={{ y: y3 }}
          initial={{ opacity: 0, y: 100 }}
          animate={isVisible ? { opacity: 1, y: 0 } : { opacity: 0, y: 100 }}
          transition={{ duration: 0.6, delay: 0.3 }}
        >
          <NoteCard delay={0.3} />
        </motion.div>
      </div>
    </div>
  );
};

const Landing = () => {
  const [scrollY, setScrollY] = useState(0);
  const [isVisible, setIsVisible] = useState(false);
  
  useEffect(() => {
    // Add scroll event listener
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    
    // Make content visible after a small delay for animation
    const timer = setTimeout(() => {
      setIsVisible(true);
    }, 300);

    return () => {
      window.removeEventListener('scroll', handleScroll);
      clearTimeout(timer);
    };
  }, []);

  // Features section data
  const features = [
    {
      title: 'AI-Powered Notes',
      description: 'Leverage artificial intelligence to enhance your note-taking experience',
      icon: (
        <svg className="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M13 10V3L4 14h7v7l9-11h-7z" />
        </svg>
      )
    },
    {
      title: 'Beautiful UI',
      description: 'Enjoy a clean, minimalist interface that helps you focus on what matters',
      icon: (
        <svg className="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
        </svg>
      )
    },
    {
      title: 'Study Mode',
      description: 'Transform your notes into effective study materials with our dedicated study mode',
      icon: (
        <svg className="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
        </svg>
      )
    },
    {
      title: 'Dark Mode',
      description: 'Easy on the eyes with a beautiful dark mode that adapts to your preferences',
      icon: (
        <svg className="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      )
    }
  ];

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-black text-white font-[SF-Pro-Display,system-ui,sans-serif] overflow-x-hidden">
      {/* Navigation */}
      <nav className="fixed top-0 left-0 right-0 z-50 bg-opacity-80 backdrop-blur-lg bg-gray-900 border-b border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <div className="flex-shrink-0 flex items-center">
              <span className="text-2xl font-medium bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-pink-400">Renotefy</span>
            </div>
            <div className="hidden md:block">
              <div className="ml-10 flex items-baseline space-x-4">
                <Link to="/login" className="px-5 py-2 rounded-md text-sm font-medium transition-colors hover:bg-white/10">Login</Link>
                <Link to="/register" className="bg-white text-gray-900 px-5 py-2 rounded-md text-sm font-medium hover:bg-opacity-90 transition-colors">Get Started</Link>
              </div>
            </div>
            <div className="md:hidden flex items-center">
              <Link to="/login" className="px-4 py-1.5 rounded-md text-sm font-medium transition-colors hover:bg-white/10">Login</Link>
              <Link to="/register" className="ml-2 bg-white text-gray-900 px-4 py-1.5 rounded-md text-sm font-medium hover:bg-opacity-90 transition-colors">Sign Up</Link>
            </div>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <div className="relative pt-28 pb-16 md:pt-36 md:pb-24 flex flex-col items-center justify-center px-4">
        <motion.div 
          className="text-center max-w-4xl mx-auto"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >
          <h1 className="text-4xl md:text-6xl font-bold tracking-tight mb-6">
            Making your notes{' '}
            <span 
              className="font-serif italic bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-pink-400"
              style={{
                fontFamily: "'Georgia', serif",
                fontWeight: 600,
                letterSpacing: "0.02em"
              }}
            >
              efficient
            </span>,
            <br />with Renotefy
          </h1>
          <p className="text-base md:text-xl mt-6 text-gray-300 max-w-2xl mx-auto leading-relaxed">
            Your personal space for notes, ideas, and everything in between.
          </p>
          <div className="mt-10 flex flex-col sm:flex-row justify-center gap-4">
            <Link to="/register">
              <motion.button 
                className="px-6 py-2.5 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-medium text-base w-full sm:w-auto shadow-md"
                whileHover={{ scale: 1.02, boxShadow: "0 4px 12px rgba(79, 70, 229, 0.3)" }}
                whileTap={{ scale: 0.98 }}
                transition={{ type: "spring", stiffness: 400, damping: 17 }}
              >
                Get Started
              </motion.button>
            </Link>
            <Link to="/login">
              <motion.button 
                className="px-6 py-2.5 rounded-full bg-white/10 backdrop-blur-sm text-white font-medium text-base border border-white/20 w-full sm:w-auto mt-3 sm:mt-0"
                whileHover={{ scale: 1.02, backgroundColor: "rgba(255,255,255,0.15)" }}
                whileTap={{ scale: 0.98 }}
                transition={{ type: "spring", stiffness: 400, damping: 17 }}
              >
                Login
              </motion.button>
            </Link>
          </div>
        </motion.div>

        {/* App Preview Cards */}
        <div className="mt-20 pb-10 relative z-10">
          <AppPreviewCards isVisible={isVisible} />
        </div>
      </div>

      {/* Features Section */}
      <div className="py-24 bg-gradient-to-b from-gray-900 to-gray-950">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center mb-16"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}
            transition={{ duration: 0.6, delay: 0.4 }}
          >
            <h2 className="text-3xl md:text-4xl font-bold">Why choose Renotefy?</h2>
            <p className="mt-4 text-lg text-gray-300 max-w-2xl mx-auto">
              Streamline your note-taking experience with these powerful features
            </p>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
            {features.map((feature, index) => (
              <motion.div 
                key={feature.title}
                className="bg-gray-800 bg-opacity-50 backdrop-blur-sm p-6 rounded-xl border border-gray-700"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}
                transition={{ duration: 0.6, delay: 0.5 + (index * 0.1) }}
                whileHover={{ y: -5, transition: { duration: 0.2 } }}
              >
                <div className="text-blue-400 mb-4">
                  {feature.icon}
                </div>
                <h3 className="text-xl font-semibold mb-2">{feature.title}</h3>
                <p className="text-gray-300">{feature.description}</p>
              </motion.div>
            ))}
          </div>
        </div>
      </div>

      {/* Call to action */}
      <div className="py-16 bg-gradient-to-b from-gray-950 to-black">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div 
            className="text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: isVisible ? 1 : 0, y: isVisible ? 0 : 20 }}
            transition={{ duration: 0.6, delay: 0.6 }}
          >
            <h2 className="text-3xl md:text-4xl font-bold">Ready to upgrade your note-taking?</h2>
            <p className="mt-4 text-lg text-gray-300 max-w-2xl mx-auto">
              Join thousands of users who are already enhancing their productivity with Renotefy
            </p>
            <div className="mt-10">
              <Link to="/register">
                <motion.button 
                  className="px-8 py-3 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600 text-white font-medium text-lg"
                  whileHover={{ scale: 1.03 }}
                  whileTap={{ scale: 0.98 }}
                >
                  Get Started Now
                </motion.button>
              </Link>
            </div>
          </motion.div>
        </div>
      </div>

      {/* Footer */}
      <footer className="bg-black py-10 border-t border-gray-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center">
            <p className="text-gray-400">¬© {new Date().getFullYear()} Renotefy. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default Landing;

